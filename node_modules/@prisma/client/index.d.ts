import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
} from './runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Query Engine version: latest
 */

/**
 * Utility Types
 */

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;
export declare type MergeTruthyValues<R extends object, S extends object> = {
  [key in keyof S | keyof R]: key extends false ? never : key extends keyof S ? S[key] extends false ? never : S[key] : key extends keyof R ? R[key] : never;
};
export declare type CleanupNever<T> = {
  [key in keyof T]: T[key] extends never ? never : key;
}[keyof T];
/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  datasources?: Datasources

  /**
   * @default "pretty"
   */
  errorFormat?: ErrorFormat

  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]>

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Reminders
 * const reminders = await prisma.reminder.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<T extends PrismaClientOptions = {}, U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Reminders
   * const reminders = await prisma.reminder.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: V extends never ? never : (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;
  /**
   * Makes a raw query
   * @example
   * ```
   * // Fetch all entries from the `User` table
   * const result = await prisma.raw`SELECT * FROM User;`
   * // Or
   * const result = await prisma.raw('SELECT * FROM User;')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma2/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  raw<T = any>(query: string | TemplateStringsArray): Promise<T>;

  /**
   * `prisma.reminder`: Exposes CRUD operations for the **Reminder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reminders
    * const reminders = await prisma.reminder.findMany()
    * ```
    */
  get reminder(): ReminderDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model Reminder
 */

export type Reminder = {
  reminder_id: number
  name: string | null
  createdAt: Date
}

export type ReminderScalars = 'reminder_id' | 'name' | 'createdAt'
  

export type ReminderSelect = {
  reminder_id?: boolean
  name?: boolean
  createdAt?: boolean
}

export type ReminderInclude = {

}

type ReminderDefault = {
  reminder_id: true
  name: true
  createdAt: true
}


export type ReminderGetSelectPayload<S extends boolean | ReminderSelect> = S extends true
  ? Reminder
  : S extends ReminderSelect
  ? {
      [P in CleanupNever<MergeTruthyValues<{}, S>>]: P extends ReminderScalars
        ? Reminder[P]
        : never
    }
   : never

export type ReminderGetIncludePayload<S extends boolean | ReminderInclude> = S extends true
  ? Reminder
  : S extends ReminderInclude
  ? {
      [P in CleanupNever<MergeTruthyValues<ReminderDefault, S>>]: P extends ReminderScalars
        ? Reminder[P]
        : never
    }
   : never

export interface ReminderDelegate {
  /**
   * Find zero or one Reminder.
   * @param {FindOneReminderArgs} args - Arguments to find a Reminder
   * @example
   * // Get one Reminder
   * const reminder = await prisma.reminder.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneReminderArgs>(
    args: Subset<T, FindOneReminderArgs>
  ): T extends FindOneReminderArgsRequired ? 'Please either choose `select` or `include`' : T extends FindOneReminderSelectArgs ? Promise<ReminderGetSelectPayload<ExtractFindOneReminderSelectArgs<T>> | null>
  : T extends FindOneReminderIncludeArgs ? Promise<ReminderGetIncludePayload<ExtractFindOneReminderIncludeArgs<T>> | null> : ReminderClient<Reminder | null>
  /**
   * Find zero or more Reminders.
   * @param {FindManyReminderArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Reminders
   * const reminders = await prisma.reminder.findMany()
   * 
   * // Get first 10 Reminders
   * const reminders = await prisma.reminder.findMany({ first: 10 })
   * 
   * // Only select the `reminder_id`
   * const reminderWithReminder_idOnly = await prisma.reminder.findMany({ select: { reminder_id: true } })
   * 
  **/
  findMany<T extends FindManyReminderArgs>(
    args?: Subset<T, FindManyReminderArgs>
  ): T extends FindManyReminderArgsRequired ? 'Please either choose `select` or `include`' : T extends FindManyReminderSelectArgs
  ? Promise<Array<ReminderGetSelectPayload<ExtractFindManyReminderSelectArgs<T>>>> : T extends FindManyReminderIncludeArgs
  ? Promise<Array<ReminderGetIncludePayload<ExtractFindManyReminderIncludeArgs<T>>>> : Promise<Array<Reminder>>
  /**
   * Create a Reminder.
   * @param {ReminderCreateArgs} args - Arguments to create a Reminder.
   * @example
   * // Create one Reminder
   * const user = await prisma.reminder.create({
   *   data: {
   *     // ... data to create a Reminder
   *   }
   * })
   * 
  **/
  create<T extends ReminderCreateArgs>(
    args: Subset<T, ReminderCreateArgs>
  ): T extends ReminderCreateArgsRequired ? 'Please either choose `select` or `include`' : T extends ReminderSelectCreateArgs ? Promise<ReminderGetSelectPayload<ExtractReminderSelectCreateArgs<T>>>
  : T extends ReminderIncludeCreateArgs ? Promise<ReminderGetIncludePayload<ExtractReminderIncludeCreateArgs<T>>> : ReminderClient<Reminder>
  /**
   * Delete a Reminder.
   * @param {ReminderDeleteArgs} args - Arguments to delete one Reminder.
   * @example
   * // Delete one Reminder
   * const user = await prisma.reminder.delete({
   *   where: {
   *     // ... filter to delete one Reminder
   *   }
   * })
   * 
  **/
  delete<T extends ReminderDeleteArgs>(
    args: Subset<T, ReminderDeleteArgs>
  ): T extends ReminderDeleteArgsRequired ? 'Please either choose `select` or `include`' : T extends ReminderSelectDeleteArgs ? Promise<ReminderGetSelectPayload<ExtractReminderSelectDeleteArgs<T>>>
  : T extends ReminderIncludeDeleteArgs ? Promise<ReminderGetIncludePayload<ExtractReminderIncludeDeleteArgs<T>>> : ReminderClient<Reminder>
  /**
   * Update one Reminder.
   * @param {ReminderUpdateArgs} args - Arguments to update one Reminder.
   * @example
   * // Update one Reminder
   * const reminder = await prisma.reminder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  update<T extends ReminderUpdateArgs>(
    args: Subset<T, ReminderUpdateArgs>
  ): T extends ReminderUpdateArgsRequired ? 'Please either choose `select` or `include`' : T extends ReminderSelectUpdateArgs ? Promise<ReminderGetSelectPayload<ExtractReminderSelectUpdateArgs<T>>>
  : T extends ReminderIncludeUpdateArgs ? Promise<ReminderGetIncludePayload<ExtractReminderIncludeUpdateArgs<T>>> : ReminderClient<Reminder>
  /**
   * Delete zero or more Reminders.
   * @param {ReminderDeleteManyArgs} args - Arguments to filter Reminders to delete.
   * @example
   * // Delete a few Reminders
   * const { count } = await prisma.reminder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ReminderDeleteManyArgs>(
    args: Subset<T, ReminderDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Reminders.
   * @param {ReminderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Reminders
   * const reminder = await prisma.reminder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provider data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ReminderUpdateManyArgs>(
    args: Subset<T, ReminderUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Reminder.
   * @param {ReminderUpsertArgs} args - Arguments to update or create a Reminder.
   * @example
   * // Update or create a Reminder
   * const reminder = await prisma.reminder.upsert({
   *   create: {
   *     // ... data to create a Reminder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Reminder we want to update
   *   }
   * })
  **/
  upsert<T extends ReminderUpsertArgs>(
    args: Subset<T, ReminderUpsertArgs>
  ): T extends ReminderUpsertArgsRequired ? 'Please either choose `select` or `include`' : T extends ReminderSelectUpsertArgs ? Promise<ReminderGetSelectPayload<ExtractReminderSelectUpsertArgs<T>>>
  : T extends ReminderIncludeUpsertArgs ? Promise<ReminderGetIncludePayload<ExtractReminderIncludeUpsertArgs<T>>> : ReminderClient<Reminder>
  /**
   * 
   */
  count(): Promise<number>
}

export declare class ReminderClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';


  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Reminder findOne
 */
export type FindOneReminderArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * Filter, which Reminder to fetch.
  **/
  where: ReminderWhereUniqueInput
}

export type FindOneReminderArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * Filter, which Reminder to fetch.
  **/
  where: ReminderWhereUniqueInput
}

export type FindOneReminderSelectArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Filter, which Reminder to fetch.
  **/
  where: ReminderWhereUniqueInput
}

export type FindOneReminderSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Filter, which Reminder to fetch.
  **/
  where: ReminderWhereUniqueInput
}

export type FindOneReminderIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * Filter, which Reminder to fetch.
  **/
  where: ReminderWhereUniqueInput
}

export type FindOneReminderIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * Filter, which Reminder to fetch.
  **/
  where: ReminderWhereUniqueInput
}

export type ExtractFindOneReminderSelectArgs<S extends undefined | boolean | FindOneReminderSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneReminderSelectArgs
  ? S['select']
  : true

export type ExtractFindOneReminderIncludeArgs<S extends undefined | boolean | FindOneReminderIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindOneReminderIncludeArgs
  ? S['include']
  : true



/**
 * Reminder findMany
 */
export type FindManyReminderArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * Filter, which Reminders to fetch.
  **/
  where?: ReminderWhereInput | null
  /**
   * Determine the order of the Reminders to fetch.
  **/
  orderBy?: ReminderOrderByInput | null
  /**
   * Skip the first `n` Reminders.
  **/
  skip?: number | null
  /**
   * Get all Reminders that come after the Reminder you provide with the current order.
  **/
  after?: ReminderWhereUniqueInput | null
  /**
   * Get all Reminders that come before the Reminder you provide with the current order.
  **/
  before?: ReminderWhereUniqueInput | null
  /**
   * Get the first `n` Reminders.
  **/
  first?: number | null
  /**
   * Get the last `n` Reminders.
  **/
  last?: number | null
}

export type FindManyReminderArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * Filter, which Reminders to fetch.
  **/
  where?: ReminderWhereInput | null
  /**
   * Determine the order of the Reminders to fetch.
  **/
  orderBy?: ReminderOrderByInput | null
  /**
   * Skip the first `n` Reminders.
  **/
  skip?: number | null
  /**
   * Get all Reminders that come after the Reminder you provide with the current order.
  **/
  after?: ReminderWhereUniqueInput | null
  /**
   * Get all Reminders that come before the Reminder you provide with the current order.
  **/
  before?: ReminderWhereUniqueInput | null
  /**
   * Get the first `n` Reminders.
  **/
  first?: number | null
  /**
   * Get the last `n` Reminders.
  **/
  last?: number | null
}

export type FindManyReminderSelectArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Filter, which Reminders to fetch.
  **/
  where?: ReminderWhereInput | null
  /**
   * Determine the order of the Reminders to fetch.
  **/
  orderBy?: ReminderOrderByInput | null
  /**
   * Skip the first `n` Reminders.
  **/
  skip?: number | null
  /**
   * Get all Reminders that come after the Reminder you provide with the current order.
  **/
  after?: ReminderWhereUniqueInput | null
  /**
   * Get all Reminders that come before the Reminder you provide with the current order.
  **/
  before?: ReminderWhereUniqueInput | null
  /**
   * Get the first `n` Reminders.
  **/
  first?: number | null
  /**
   * Get the last `n` Reminders.
  **/
  last?: number | null
}

export type FindManyReminderSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Filter, which Reminders to fetch.
  **/
  where?: ReminderWhereInput | null
  /**
   * Determine the order of the Reminders to fetch.
  **/
  orderBy?: ReminderOrderByInput | null
  /**
   * Skip the first `n` Reminders.
  **/
  skip?: number | null
  /**
   * Get all Reminders that come after the Reminder you provide with the current order.
  **/
  after?: ReminderWhereUniqueInput | null
  /**
   * Get all Reminders that come before the Reminder you provide with the current order.
  **/
  before?: ReminderWhereUniqueInput | null
  /**
   * Get the first `n` Reminders.
  **/
  first?: number | null
  /**
   * Get the last `n` Reminders.
  **/
  last?: number | null
}

export type FindManyReminderIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * Filter, which Reminders to fetch.
  **/
  where?: ReminderWhereInput | null
  /**
   * Determine the order of the Reminders to fetch.
  **/
  orderBy?: ReminderOrderByInput | null
  /**
   * Skip the first `n` Reminders.
  **/
  skip?: number | null
  /**
   * Get all Reminders that come after the Reminder you provide with the current order.
  **/
  after?: ReminderWhereUniqueInput | null
  /**
   * Get all Reminders that come before the Reminder you provide with the current order.
  **/
  before?: ReminderWhereUniqueInput | null
  /**
   * Get the first `n` Reminders.
  **/
  first?: number | null
  /**
   * Get the last `n` Reminders.
  **/
  last?: number | null
}

export type FindManyReminderIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * Filter, which Reminders to fetch.
  **/
  where?: ReminderWhereInput | null
  /**
   * Determine the order of the Reminders to fetch.
  **/
  orderBy?: ReminderOrderByInput | null
  /**
   * Skip the first `n` Reminders.
  **/
  skip?: number | null
  /**
   * Get all Reminders that come after the Reminder you provide with the current order.
  **/
  after?: ReminderWhereUniqueInput | null
  /**
   * Get all Reminders that come before the Reminder you provide with the current order.
  **/
  before?: ReminderWhereUniqueInput | null
  /**
   * Get the first `n` Reminders.
  **/
  first?: number | null
  /**
   * Get the last `n` Reminders.
  **/
  last?: number | null
}

export type ExtractFindManyReminderSelectArgs<S extends undefined | boolean | FindManyReminderSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyReminderSelectArgs
  ? S['select']
  : true

export type ExtractFindManyReminderIncludeArgs<S extends undefined | boolean | FindManyReminderIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends FindManyReminderIncludeArgs
  ? S['include']
  : true



/**
 * Reminder create
 */
export type ReminderCreateArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * The data needed to create a Reminder.
  **/
  data: ReminderCreateInput
}

export type ReminderCreateArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * The data needed to create a Reminder.
  **/
  data: ReminderCreateInput
}

export type ReminderSelectCreateArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * The data needed to create a Reminder.
  **/
  data: ReminderCreateInput
}

export type ReminderSelectCreateArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * The data needed to create a Reminder.
  **/
  data: ReminderCreateInput
}

export type ReminderIncludeCreateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * The data needed to create a Reminder.
  **/
  data: ReminderCreateInput
}

export type ReminderIncludeCreateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * The data needed to create a Reminder.
  **/
  data: ReminderCreateInput
}

export type ExtractReminderSelectCreateArgs<S extends undefined | boolean | ReminderSelectCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderSelectCreateArgs
  ? S['select']
  : true

export type ExtractReminderIncludeCreateArgs<S extends undefined | boolean | ReminderIncludeCreateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderIncludeCreateArgs
  ? S['include']
  : true



/**
 * Reminder update
 */
export type ReminderUpdateArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * The data needed to update a Reminder.
  **/
  data: ReminderUpdateInput
  /**
   * Choose, which Reminder to update.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderUpdateArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * The data needed to update a Reminder.
  **/
  data: ReminderUpdateInput
  /**
   * Choose, which Reminder to update.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderSelectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * The data needed to update a Reminder.
  **/
  data: ReminderUpdateInput
  /**
   * Choose, which Reminder to update.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderSelectUpdateArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * The data needed to update a Reminder.
  **/
  data: ReminderUpdateInput
  /**
   * Choose, which Reminder to update.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderIncludeUpdateArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * The data needed to update a Reminder.
  **/
  data: ReminderUpdateInput
  /**
   * Choose, which Reminder to update.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderIncludeUpdateArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * The data needed to update a Reminder.
  **/
  data: ReminderUpdateInput
  /**
   * Choose, which Reminder to update.
  **/
  where: ReminderWhereUniqueInput
}

export type ExtractReminderSelectUpdateArgs<S extends undefined | boolean | ReminderSelectUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderSelectUpdateArgs
  ? S['select']
  : true

export type ExtractReminderIncludeUpdateArgs<S extends undefined | boolean | ReminderIncludeUpdateArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderIncludeUpdateArgs
  ? S['include']
  : true



/**
 * Reminder updateMany
 */
export type ReminderUpdateManyArgs = {
  data: ReminderUpdateManyMutationInput
  where?: ReminderWhereInput | null
}


/**
 * Reminder upsert
 */
export type ReminderUpsertArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * The filter to search for the Reminder to update in case it exists.
  **/
  where: ReminderWhereUniqueInput
  /**
   * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
  **/
  create: ReminderCreateInput
  /**
   * In case the Reminder was found with the provided `where` argument, update it with this data.
  **/
  update: ReminderUpdateInput
}

export type ReminderUpsertArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * The filter to search for the Reminder to update in case it exists.
  **/
  where: ReminderWhereUniqueInput
  /**
   * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
  **/
  create: ReminderCreateInput
  /**
   * In case the Reminder was found with the provided `where` argument, update it with this data.
  **/
  update: ReminderUpdateInput
}

export type ReminderSelectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * The filter to search for the Reminder to update in case it exists.
  **/
  where: ReminderWhereUniqueInput
  /**
   * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
  **/
  create: ReminderCreateInput
  /**
   * In case the Reminder was found with the provided `where` argument, update it with this data.
  **/
  update: ReminderUpdateInput
}

export type ReminderSelectUpsertArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * The filter to search for the Reminder to update in case it exists.
  **/
  where: ReminderWhereUniqueInput
  /**
   * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
  **/
  create: ReminderCreateInput
  /**
   * In case the Reminder was found with the provided `where` argument, update it with this data.
  **/
  update: ReminderUpdateInput
}

export type ReminderIncludeUpsertArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * The filter to search for the Reminder to update in case it exists.
  **/
  where: ReminderWhereUniqueInput
  /**
   * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
  **/
  create: ReminderCreateInput
  /**
   * In case the Reminder was found with the provided `where` argument, update it with this data.
  **/
  update: ReminderUpdateInput
}

export type ReminderIncludeUpsertArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * The filter to search for the Reminder to update in case it exists.
  **/
  where: ReminderWhereUniqueInput
  /**
   * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
  **/
  create: ReminderCreateInput
  /**
   * In case the Reminder was found with the provided `where` argument, update it with this data.
  **/
  update: ReminderUpdateInput
}

export type ExtractReminderSelectUpsertArgs<S extends undefined | boolean | ReminderSelectUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderSelectUpsertArgs
  ? S['select']
  : true

export type ExtractReminderIncludeUpsertArgs<S extends undefined | boolean | ReminderIncludeUpsertArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderIncludeUpsertArgs
  ? S['include']
  : true



/**
 * Reminder delete
 */
export type ReminderDeleteArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * Filter which Reminder to delete.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderDeleteArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * Filter which Reminder to delete.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderSelectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Filter which Reminder to delete.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderSelectDeleteArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Filter which Reminder to delete.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderIncludeDeleteArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
  /**
   * Filter which Reminder to delete.
  **/
  where: ReminderWhereUniqueInput
}

export type ReminderIncludeDeleteArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
  /**
   * Filter which Reminder to delete.
  **/
  where: ReminderWhereUniqueInput
}

export type ExtractReminderSelectDeleteArgs<S extends undefined | boolean | ReminderSelectDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderSelectDeleteArgs
  ? S['select']
  : true

export type ExtractReminderIncludeDeleteArgs<S extends undefined | boolean | ReminderIncludeDeleteArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderIncludeDeleteArgs
  ? S['include']
  : true



/**
 * Reminder deleteMany
 */
export type ReminderDeleteManyArgs = {
  where?: ReminderWhereInput | null
}


/**
 * Reminder without action
 */
export type ReminderArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
}

export type ReminderArgsRequired = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
}

export type ReminderSelectArgs = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select: ReminderSelect
}

export type ReminderSelectArgsOptional = {
  /**
   * Select specific fields to fetch from the Reminder
  **/
  select?: ReminderSelect | null
}

export type ReminderIncludeArgs = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include: ReminderInclude
}

export type ReminderIncludeArgsOptional = {
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ReminderInclude | null
}

export type ExtractReminderSelectArgs<S extends undefined | boolean | ReminderSelectArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderSelectArgs
  ? S['select']
  : true

export type ExtractReminderIncludeArgs<S extends undefined | boolean | ReminderIncludeArgsOptional> = S extends undefined
  ? false
  : S extends boolean
  ? S
  : S extends ReminderIncludeArgs
  ? S['include']
  : true




/**
 * Deep Input Types
 */


export type ReminderWhereInput = {
  reminder_id?: number | IntFilter | null
  name?: string | NullableStringFilter | null
  createdAt?: Date | string | DateTimeFilter | null
  AND?: Enumerable<ReminderWhereInput> | null
  OR?: Enumerable<ReminderWhereInput> | null
  NOT?: Enumerable<ReminderWhereInput> | null
}

export type ReminderWhereUniqueInput = {
  reminder_id?: number | null
}

export type ReminderCreateInput = {
  name?: string | null
  createdAt?: Date | string | null
}

export type ReminderUpdateInput = {
  reminder_id?: number | null
  name?: string | null
  createdAt?: Date | string | null
}

export type ReminderUpdateManyMutationInput = {
  reminder_id?: number | null
  name?: string | null
  createdAt?: Date | string | null
}

export type IntFilter = {
  equals?: number | null
  not?: number | IntFilter | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type NullableStringFilter = {
  equals?: string | null
  not?: string | null | NullableStringFilter
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type DateTimeFilter = {
  equals?: Date | string | null
  not?: Date | string | DateTimeFilter | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
}

export type ReminderOrderByInput = {
  reminder_id?: OrderByArg | null
  name?: OrderByArg | null
  createdAt?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
